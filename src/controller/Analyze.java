package controller;

import model.Data;
import model.Order;
import model.Output;
import model.SiteVisit;
import view.Main;

import java.sql.Timestamp;
import java.util.*;

/**
 * Created by Arjun on 8/7/17.
 */
public class Analyze {

    /**
     *
     * This method gets top 'X' customers with in the decreasing order of Customer LTV
     *
     * @param X noOfCustomers required as output
     * @param D entire data loaded as input
     * @return
     */
    public static List<Output> topXSimpleLTVCustomers(int X, Data D) {
        // calculating the LTV values for all customers
        Map<Double, List<String>> customersWithLTV = calculateSimpleLTVCustomers(D);

        // Filtering output to 'X' no of records
        List<Output> output = new ArrayList<>();

        int count = 0;
        for (Double ltv : customersWithLTV.keySet()) {
            for (String customerId : customersWithLTV.get(ltv)) {
                output.add(new Output(D.getCustomers().get(customerId), ltv));
                count++;
                if (count > X) break;
            }
            if (count > X) break;
        }
        return output;
    }

    /**
     *
     * This method calculates simple LTV for all customers
     *
     * @param data input data
     * @return
     */
    private static Map<Double, List<String>> calculateSimpleLTVCustomers(Data data) {

        // creating the tree map and storing all the customers with LTV
        Map<Double, List<String>> customersWithLTV = new TreeMap<>(Collections.reverseOrder());
        double noOfWeeks = getNumOfWeeks(data);

        for (String eachCustomerId : data.getCustomers().keySet()) {

            double totalAmt = getTotalAmountByCustomer(eachCustomerId, data);
            int noOfVisits = getNumOfVisitsForCustomer(eachCustomerId, data);

            // expense per visit = totalAmt / noOfVisits
            double expensePerVisit = (noOfVisits != 0) ? (totalAmt / noOfVisits) : 0;

            // number of visits per week = noOfVisits / noOfWeeks

            double noOfVisitsPerWeek = (noOfWeeks != 0) ? (noOfVisits / noOfWeeks) : noOfVisits;

            // average customer value per week (customer expenditures per visit (USD) x number of site visits per week)
            double avgCustomerValuePerWeek = expensePerVisit * noOfVisitsPerWeek;

            // LTV = 52(a) x t
            double LTVForCustomer = 52 * avgCustomerValuePerWeek * Main.AVG_LIFESPAN_SHUTTERFLY;

            // adding the calculated LTV value
            if (customersWithLTV.containsKey(LTVForCustomer)) {
                List<String> customerIds = customersWithLTV.get(LTVForCustomer);
                customerIds.add(eachCustomerId);
                customersWithLTV.put(LTVForCustomer, customerIds);
            } else {
                List<String> customerIds = new ArrayList<>();
                customerIds.add(eachCustomerId);
                customersWithLTV.put(LTVForCustomer, customerIds);
            }

        }

        return customersWithLTV;
    }

    /**
     *
     * Utility method that get number of weeks a particular user is active
     *
     * @param data
     * @return
     */
    private static double getNumOfWeeks(Data data) {
        Timestamp lastVisit = Timestamp.valueOf("1970-01-01 00:00:00");
        Timestamp firstVisit = Timestamp.valueOf("2100-01-01 00:00:00");

        boolean doesChange = false;
        // getting the first visit time and last visit time and calculating the number of weeks
        for (List<SiteVisit> siteVisits : data.getSiteVisits().values()) {
            for (SiteVisit eachSiteVisit : siteVisits) {
                if (eachSiteVisit.getEventTime().before(firstVisit)) {
                    doesChange = true;
                    firstVisit = eachSiteVisit.getEventTime();
                }
                if (eachSiteVisit.getEventTime().after(lastVisit)) {
                    doesChange = true;
                    lastVisit = eachSiteVisit.getEventTime();
                }
            }
        }

        return (doesChange) ? (double) diffOfTimes(lastVisit, firstVisit) / 7.0 : 0.0;
    }

    /**
     *
     * Utility method to return number of times the customer visited the site.
     *
     * @param customerId
     * @param data
     * @return
     */
    private static int getNumOfVisitsForCustomer(String customerId, Data data) {
        return (data.getSiteVisits().containsKey(customerId)) ? data.getSiteVisits().get(customerId).size() : 0;
    }

    /**
     *
     * Utility method that calculates the total amount generated by the user for all orders
     *
     * @param customerId
     * @param data
     * @return
     */
    private static double getTotalAmountByCustomer(String customerId, Data data) {

        double totalAmt = 0;
        if (data.getOrders().containsKey(customerId)) {
            for (Order eachOrder : data.getOrders().get(customerId)) {
                totalAmt += eachOrder.getTotalAmount();
            }
        }
        return totalAmt;
    }

    /**
     *
     * Utility method to caluclate the number of days between two timestamps
     *
     * @param t1
     * @param t2
     * @return
     */
    private static double diffOfTimes(Timestamp t1, Timestamp t2) {
        return (t1.getTime() - t2.getTime()) / (1000 * 60 * 60 * 24);
    }

}
